from urllib.parse import quote

import requests

from src import *
from src.helper import env, response, log


def get_auth_url():
    auth_query_parameters = dict(
        response_type=SPOTIFY_RESPONSE_TYPE,
        redirect_uri=SPOTIFY_REDIRECT_URI,
        scope=SPOTIFY_SCOPES,
        client_id=env.get_spotify_client_id()
    )
    url_args = '&'.join(['{}={}'.format(key, quote(val)) for key, val in auth_query_parameters.items()])
    auth_url = '{}/?{}'.format(SPOTIFY_API_LOGIN_URL, url_args)
    return auth_url


def get_access_token(code):
    for attempt in range(0, SPOTIFY_API_RETRIES):
        try:
            code_payload = {
                'grant_type': 'authorization_code',
                'code': str(code),
                'redirect_uri': SPOTIFY_REDIRECT_URI,
                'client_id': env.get_spotify_client_id(),
                'client_secret': env.get_spotify_client_secret(),
            }
            post_request = requests.post(SPOTIFY_API_TOKEN_URL, data=code_payload, timeout=SPOTIFY_API_TIMEOUT)
            if post_request.ok:
                post_request = post_request.json()
                return response.get('access_token', post_request)
        except Exception as e:
            if attempt < SPOTIFY_API_RETRIES - 1:
                log.warn(f'Attempt number {attempt}: Failed - [{e}]. Retrying...')
            else:
                log.error(f'Error in {get_access_token.__name__} function. [{e}]')
    return None


def get_current_user_id(access_token):
    for attempt in range(0, SPOTIFY_API_RETRIES):
        try:
            headers = {'Authorization': f'Bearer {access_token}'}
            profile_response = requests.get(SPOTIFY_API_CURRENT_USER, headers=headers, timeout=SPOTIFY_API_TIMEOUT)
            if profile_response.ok:
                profile_response = profile_response.json()
                return response.get('id', profile_response)
        except Exception as e:
            if attempt < SPOTIFY_API_RETRIES - 1:
                log.warn(f'Attempt number {attempt}: Failed - [{e}]. Retrying...')
            else:
                log.error(f'Error in {get_current_user_id.__name__} function. [{e}]')
    return None


def post_playlist(access_token, spotify_user_id, github_user):
    for attempt in range(0, SPOTIFY_API_RETRIES):
        try:
            headers = {'Authorization': f'Bearer {access_token}'}
            data = {'name': f'{github_user} playlist based on GitHub', 'description': 'Generated by git-inspect'}
            endpoint = SPOTIFY_API_CREATE_PLAYLIST.format(user_id=spotify_user_id)
            playlist_response = requests.post(endpoint, json=data, headers=headers, timeout=SPOTIFY_API_TIMEOUT)
            if playlist_response.ok:
                playlist_response = playlist_response.json()
                playlist_id = response.get('id', playlist_response)
                playlist_url = None if not response.get('external_urls', playlist_response) \
                    else response.get('spotify', playlist_response['external_urls'])
                return playlist_id, playlist_url
        except Exception as e:
            if attempt < SPOTIFY_API_RETRIES - 1:
                log.warn(f'Attempt number {attempt}: Failed - [{e}]. Retrying...')
            else:
                log.error(f'Error in {post_playlist.__name__} function. [{e}]')
    return None, None


def search_for_tracks(access_token, query):
    for attempt in range(0, SPOTIFY_API_RETRIES):
        try:
            headers = {'Authorization': f'Bearer {access_token}'}
            params = {'q': query, 'type': 'track', 'limit': 1}
            endpoint = SPOTIFY_API_SEARCH
            track_response = requests.get(endpoint, params=params, headers=headers, timeout=GITHUB_API_TIMEOUT)
            if track_response.ok:
                track_response = track_response.json()
                track_item = response.get('tracks', track_response)
                if track_item:
                    for track_dict in response.get('items', track_item, default=[]):
                        track_uri = response.get('uri', track_dict)
                        if track_uri:
                            return track_uri
        except Exception as e:
            if attempt < SPOTIFY_API_RETRIES - 1:
                log.warn(f'Attempt number {attempt}: Failed - [{e}]. Retrying...')
            else:
                log.error(f'Error in {search_for_tracks.__name__} function. [{e}]')
    return None


def add_tracks_to_playlist(access_token, playlist_id, track_uri_list):
    for attempt in range(0, SPOTIFY_API_RETRIES):
        try:
            headers = {'Authorization': f'Bearer {access_token}'}
            data = {'uris': track_uri_list}
            endpoint = SPOTIFY_API_ADD_TRACKS.format(playlist_id=playlist_id)
            track_response = requests.post(endpoint, json=data, headers=headers, timeout=SPOTIFY_API_TIMEOUT)
            if track_response.ok:
                return True
        except Exception as e:
            if attempt < SPOTIFY_API_RETRIES - 1:
                log.warn(f'Attempt number {attempt}: Failed - [{e}]. Retrying...')
            else:
                log.error(f'Error in {add_tracks_to_playlist.__name__} function. [{e}]')
    return None
